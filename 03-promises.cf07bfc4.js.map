{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,UAAWL,SAASC,cAAc,0BAGpCH,EAAKC,KAAKO,iBAAiB,UAE3B,SAAsBC,GACpBT,EAAKO,UAAUG,UAAW,EAE1BD,EAAEE,iBAMF,IAJA,IAAIC,EAAQC,SAASb,EAAKI,MAAMU,OAC1BT,EAAOQ,SAASb,EAAKK,KAAKS,OAC1BR,EAASO,SAASb,EAAKM,OAAOQ,OAE3BC,EAAI,EAAGA,GAAKT,EAAQS,GAAK,EAChCC,EAAcD,EAAGH,GACdK,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUf,EAAKc,EAALd,MACjBgB,EAAAtB,GAASuB,OAAOC,QACd,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANnB,EAAM,M,IAGjDoB,OAAM,SAAAN,G,IAAGC,EAAQD,EAARC,SAAUf,EAAKc,EAALd,MAClBgB,EAAAtB,GAASuB,OAAOI,QACd,sBAAqCF,OAAfJ,EAAS,QAAYI,OAANnB,EAAM,M,IAGjDQ,GAASP,C,IAMb,SAASW,EAAcG,EAAUf,GAC/B,IAAMsB,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACfC,YAAW,WACjBN,EACFI,EAAQ,CAAEX,WAAUf,UACf2B,EAAS,CAAEZ,WAAUf,S,GAC3BA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  submitBtn: document.querySelector('button[type=\"submit\"]'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  refs.submitBtn.disabled = true;\n\n  e.preventDefault();\n\n  let delay = parseInt(refs.delay.value);\n  const step = parseInt(refs.step.value);\n  const amount = parseInt(refs.amount.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n}\n\nlet timeoutId = null;\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, rejected) => {\n    timeoutId = setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else rejected({ position, delay });\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","submitBtn","addEventListener","e","disabled","preventDefault","delay1","parseInt","value","i","$ce04d3a99e08e73b$var$createPromise","then","param","position","$parcel$interopDefault","Notify","success","concat","catch","failure","shouldResolve","Math","random","Promise","resolve","rejected","setTimeout"],"version":3,"file":"03-promises.cf07bfc4.js.map"}